{"version":3,"sources":["AddCategory.js","helpers/getGifs.js","GifGridItem.js","GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","prevCategorie","type","placeholder","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","console","log","map","item","id","images","downsized_medium","title","gifs","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","img","key","GifExpertApp","categories","root","document","getElementById","ReactDOM","render"],"mappings":"mMA2BeA,EAzBK,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACHC,mBAAS,IADN,mBAChCC,EADgC,KACpBC,EADoB,KAavC,OACI,0BAAMC,SAPgB,SAAAC,GACtBA,EAAEC,iBACFN,GAAc,SAAAO,GAAa,OAAKL,GAAL,mBAAoBK,OAC/CJ,EAAc,MAKV,2BACIK,KAAK,OACLC,YAAY,gBACZC,MAAOR,EACPS,SAhBc,SAAAN,GACtBF,EAAcE,EAAEO,OAAOF,Y,uBCNlBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACbC,EADa,yDAEmCC,UAAUH,GAF7C,sDAIAI,MAAMF,GAJN,cAIbG,EAJa,gBAKIA,EAAKC,OALT,uBAKXC,EALW,EAKXA,KAERC,QAAQC,IAAIT,GAPO,UASAO,EAAKG,KAAI,SAAAC,GAAS,IAAD,EAChC,MAAO,CACHC,GAAID,EAAKC,GACTV,IAAG,UAAES,EAAKE,cAAP,aAAE,EAAaC,iBAAiBZ,IACnCa,MAAOJ,EAAKI,UAbD,eASbC,EATa,yBAiBZA,GAjBY,4CAAH,sDCEPC,EAAc,SAAC,GAAuB,EAArBL,GAAsB,IAAlBG,EAAiB,EAAjBA,MAAOb,EAAU,EAAVA,IAErC,OACI,yBAAKgB,UAAU,YACX,yBAAKC,IAAKjB,EAAKkB,IAAKL,IACpB,2BAAIA,KCgBDM,EAnBC,SAAC,GAAkB,IAAhBrB,EAAe,EAAfA,SAAe,ECDN,SAAAA,GAAa,IAAD,EACVb,mBAAS,CAC/BoB,KAAM,GACNe,SAAS,IAHuB,mBAC7BC,EAD6B,KACtBC,EADsB,KAepC,OATAC,qBAAU,WACN1B,EAAQC,GAAU0B,MAAK,SAAAC,GACnBH,EAAS,CACLjB,KAAMoB,EACNL,SAAS,SAGlB,CAACtB,IAEGuB,EDb2BK,CAAa5B,GAAjCa,EADgB,EACtBN,KAAce,EADQ,EACRA,QAGtB,OACI,oCACI,4BAAKtB,GAEJsB,GAAW,0CAEZ,yBAAKJ,UAAU,YACVL,EAAOH,KAAI,SAAAmB,GAAG,OACX,kBAAC,EAAD,eAAaC,IAAKD,EAAIjB,IAAQiB,UEMnCE,EAlBM,WAAO,IAAD,EACa5C,mBAAS,IADtB,mBAChB6C,EADgB,KACJ9C,EADI,KAGvB,OACI,oCACI,4CACA,kBAAC,EAAD,CAAaA,cAAeA,IAC5B,6BAEA,4BACK8C,EAAWtB,KAAI,SAAAV,GAAQ,OACpB,kBAAC,EAAD,CAAS8B,IAAK9B,EAAUA,SAAUA,UCVhDiC,EAAOC,SAASC,eAAe,QAErCC,IAASC,OACL,oCACI,kBAAC,EAAD,OAEJJ,I","file":"static/js/main.cd6b53be.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\n\r\nconst AddCategory = ({ setCategories }) => {\r\n    const [inputValue, setInputValue] = useState('');\r\n\r\n    const handleInputChange = e => {\r\n        setInputValue(e.target.value);\r\n    };\r\n\r\n    const handleInputSubmit = e => {\r\n        e.preventDefault();\r\n        setCategories(prevCategorie => [inputValue, ...prevCategorie]);\r\n        setInputValue('');\r\n    };\r\n\r\n    return (\r\n        <form onSubmit={handleInputSubmit}>\r\n            <input\r\n                type=\"text\"\r\n                placeholder='Busque un GIF'\r\n                value={inputValue}\r\n                onChange={handleInputChange}\r\n            />\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default AddCategory;\r\n","export const getGifs = async ( category ) => {\r\n    const url =\r\n        `https://api.giphy.com/v1/gifs/search?limit=8&q=${encodeURI(category)}&api_key=03xvqd9HJbUPmfYaJqOJp59lUBlOzbZc`;\r\n\r\n    const resp = await fetch(url);\r\n    const { data } = await resp.json();\r\n\r\n    console.log(category);\r\n\r\n    const gifs = await data.map(item => {\r\n        return {\r\n            id: item.id,\r\n            url: item.images?.downsized_medium.url,\r\n            title: item.title,\r\n        };\r\n    });\r\n    \r\n    return gifs;\r\n};","import React from \"react\";\r\n\r\nexport const GifGridItem = ({ id, title, url }) => {\r\n\r\n    return (\r\n        <div className='gif-item'>\r\n            <img src={url} alt={title} />\r\n            <p>{title}</p>\r\n        </div>\r\n    );\r\n};\r\n","import React from \"react\";\r\nimport { useFetchGifs } from \"./hooks/useFetchGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\n\r\nconst GifGrid = ({ category }) => {\r\n    const { data: images, loading } = useFetchGifs(category);\r\n\r\n\r\n    return (\r\n        <>\r\n            <h3>{category}</h3>\r\n\r\n            {loading && <p>Cargando...</p>}\r\n\r\n            <div className=\"gif-grid\">\r\n                {images.map(img => (\r\n                    <GifGridItem key={img.id} {...img} />\r\n                ))}\r\n            </div>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GifGrid;\r\n","import { useState, useEffect } from \"react\";\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = category => {\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true,\r\n    });\r\n\r\n    useEffect(() => {\r\n        getGifs(category).then(imgs => {\r\n            setState({\r\n                data: imgs,\r\n                loading: false,\r\n            });\r\n        });\r\n    }, [category]);\r\n\r\n    return state;\r\n};\r\n","import React, { useState } from \"react\";\r\nimport AddCategory from \"./AddCategory\";\r\nimport GifGrid from \"./GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n    const [categories, setCategories] = useState([]);\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory setCategories={setCategories} />\r\n            <hr />\r\n\r\n            <ol>\r\n                {categories.map(category => (\r\n                    <GifGrid key={category} category={category} />\r\n                ))}\r\n            </ol>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GifExpertApp;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport GifExpertApp from \"./GifExpertApp\";\n\nconst root = document.getElementById(\"root\");\n\nReactDOM.render(\n    <>\n        <GifExpertApp />\n    </>,\n    root\n);\n"],"sourceRoot":""}